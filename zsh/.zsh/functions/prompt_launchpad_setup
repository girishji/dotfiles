#!/bin/zsh
# Set up our prompt theme.

##
# Main prompt
#

# Prompt escape codes
#      %F{<x>}:  Set foreground color. <x> can be one of the 8 standard color
#                names, a number from 0 to 255 or a hex value (if your terminal
#                supports it). See also
#                https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
#           %f:  Reset foreground color to default.
#           %~:  Current directory, in ~abbreviated form
#           %#:  If user is root, then '#', else '%'
# %(?,<a>,<b>):  If last exit status was 0, then <a>, else <b>
# https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html
# PS1="%F{%(?,10,9)}%#%f "  # 10 is bright green; 9 is bright red.
# %(x,true-text,false-text) is a ternary expression. ? means true if the exit
# status of the last command was n.
# https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html

# girish: print current directory in a separate line
# assign prompt in one line: https://superuser.com/questions/382503/how-can-i-put-a-newline-in-my-zsh-prompt-without-causing-terminal-redraw-issues
if [[ $OSTYPE == darwin* && $(arch) != arm64 ]]; then
    PS1="%F{244}<$(arch)> %40<..<%~%<<%f"$'\n'"%F{%(?,10,9)}%#%f "  # 10 is bright green; 9 is bright red.
else
    PS1="%F{244}%40<..<%~%<<%f"$'\n'"%K{%(?,10,9)}%F{0}%#%f%k "  # 10 is bright green; 9 is bright red.
fi

# Strings in "double quotes" are what is in some languages called "template
# strings": They allow the use of $expansions inside, which are then
# substituted with the parameters' values.
# Strings in 'single quotes', on the other hand, are literal strings. They
# always evaluate to the literal characters you see on your screen.

# Make prompt stay about 30% above bottom of screen
# https://superuser.com/questions/1389834/can-i-have-the-terminal-prompt-at-the-vertical-middle-of-a-window
() {
    # load terminfo modules to make the associative array $terminfo available
    zmodload zsh/terminfo
    local third_of_page=$((LINES/3))
    # cud1 is cursor down one line, cuu1 is one line up.
    local third_down=""
    for i in {1..$third_of_page}; do
        third_down="$third_down$terminfo[cud1]"
    done
    local third_up=""
    for i in {1..$third_of_page}; do
        third_up="$third_up$terminfo[cuu1]"
    done
    PS1="%{${third_down}${third_up}%}$PS1"
}

# Install our chpwd and precmd hook functions.
# https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions
# -U tells autoload not to expand aliases inside the function.
# -z tells autoload that the function file is written in the default Zsh style.
# The latter is normally not necessary, but better safe than sorry.
autoload -Uz add-zsh-hook
local hook=
for hook in chpwd precmd; do
  add-zsh-hook $hook prompt_launchpad_$hook
done
# add-zsh-hook can autoload our functions by name, because in 04-env.zsh, we
# added their parent dir to our $fpath.

prompt_launchpad_chpwd  # Call once before the first prompt.

##
# Continuation prompt
#
# This prompt is shown if, after pressing enter, you have left unclosed shell
# constructs in your command line, for example, a string without a terminating
# quote or a `for` loop without the final `done`.

PS2=  # Empty the left side, to make it easier to copy code from our terminal.
RPS2="%F{11}%^%f"  # %^ shows which shell constructs are still open.
# 11 is bright yellow.


##
# Options
#

# Auto-remove the right side of each prompt when you press enter. This way,
# we'll have less clutter on screen. This also makes it easier to copy code from
# our terminal.
setopt TRANSIENT_RPROMPT

# If we're not on an SSH connection, then remove the outer margin of the right
# side of the prompt.
[[ -v SSH_CONNECTION ]] ||
    ZLE_RPROMPT_INDENT=0
