*keybindings.txt*
------------------------------------------------------------------------
Keymap help

*gkeymap-window-mgmt*
<C-W> Window

:wincmd
:[count]winc[md] {arg}
		Like executing CTRL-W [count] {arg}.  Example: >
			:wincmd j

	  s: "Split window",
	  v: "Split window vertically",
	  w: "Switch windows",
	  q: "Quit a window",
	  o: "Close all other windows",
	  T: "Break out into a new tab",
	  x: "Swap current with next",
	  "-": "Decrease height",
	  "+": "Increase height",
	  "<": "Decrease width",
	  ">": "Increase width",
	  "|": "Max out the width",
	  "_": "Max out the height",
	  "=": "Equally high and wide",
	  h: "Go to the left window",
	  l: "Go to the right window",
	  k: "Go to the up window",
	  j: "Go to the down window",

------------------------------------------------------------------------
Folds                                       *gkeymap-folds*
`z` key <- letter z looks like folded paper from the side
m/M = more folding (under cursor / all)
r/R = reduce folding
c = close
o = open
[z, ]z to hop through folds

	    zo: "Open fold under cursor",
	    zO: "Open all folds under cursor",
	    zc: "Close fold under cursor",
	    zC: "Close all folds under cursor",
	    za: "Toggle fold under cursor",
	    zA: "Toggle all folds under cursor",
	    zM: "Close all folds",
	    zR: "Open all folds",
	    zm: "Fold more",
	    zr: "Fold less",
	    zx: "Update folds",
	    zz: "Center this line",
	    zt: "Top this line",
	    z"<CR>": "Top this line, cursor in 1st non-blank col",
	    zb: "Bottom this line",
	    zg: "Add word to spell list",
	    zw: "Mark word as bad/misspelling",
	    ze: "Right this line",
	    zs: "Left this line",
	    zH: "Half screen to the left",
	    zL: "Half screen to the right",
	    zi: "Toggle folding",
	    z["="]: "Spelling suggestions",

------------------------------------------------------------------------
`g` key
*gkeymap-g*

          "g;": "cycle thru recent changes (oldest first)",
          "g,": "reverse direction of above",
	  "gf": "Go to file under cursor",
	  "gx": "Open the file under cursor with system app",
	  "gi": "Move to the last insertion and INSERT",
	  "gv": "Switch to VISUAL using last selection",
	  "gn": "Search forwards and select",
	  "gN": "Search backwards and select",
	  "g%": "Cycle backwards through results",


------------------------------------------------------------------------
Navigation tricks 					*gnavigation*

Navigation [ and ]
*gkeymap-sq-brkt*

	  "[{": "Previous {",
	  "[(": "Previous (",
	  "[<lt>": "Previous <",
	  "[m": "Previous method start",
	  "[M": "Previous method end",
	  "[%": "Previous unmatched group",
	  "[s": "Previous misspelled word",
	  "]{": "Next {",
	  "](": "Next (",
	  "]<lt>": "Next <",
	  "]m": "Next method start",
	  "]M": "Next method end",
	  "]%": "Next unmatched group",
	  "]s": "Next misspelled word",
	  "H": "Home line of window (top)",
	  "M": "Middle line of window",
	  "L": "Last line of window",
	  "]i": "Search symbol in include file (forward)",
	  "[i": "Search symbol in include file (backward",
	  "]d": "Search macro (#define) symbols",
	  "[d": "Search macro (#define) symbols",

Bram says `[<tab>` will jump to symbol definition. It does look for included
files and other files in dir. `gd` also goes to definition, but it searches
within the file and highlights all matches unlike `[<tab>`.

------------------------------------------------------------------------
Completion in insertion mode
								  *gcompletion*
|ins-completion|
|complete-functions|

<c-n/p> match what is in |'complete'| , in addition to 'keywords'.
ex., `set complete+=t` will match tags; k will match dictionaries

To start <c-x><c-n/p> long completion chain, start by <c-n><c-p>
|ins-completion-menu| explains c-n c-p
M&eacute;xico
M^n^p^x^p^x^p
^n starts completion, ^p takes back the characters upto M, ^c^p finish next
two fragments

<C-p/n> -> matches previous/next keyword beginning with same letters; if no letters are
before curose, then match any keyword >=2 chars.
	e.g., to get:
	    printf("(%g, %g, %g)", vector[0], vector[1], vector[2]);
	just type:
	    printf("(%g, %g, %g)", vector[0], ^P[1], ^P[2]);
<C-x><C-p/n> -> <C-x> puts you in sub-mode of insert mode (C-n/p above are
different, they don't put you in new mode). C-p matches keyword >=1 char,
scanning backwards from where the cursor is. C-n scans forward. Using these
you can complete (repeat) large chunks of text typed previously.

<C-x><C-l> 'l' stands for line. You can replace yank and paste of whole lines.
Put cursor at beginning of line, type first char of line you want to replicate
and press <c-x><c-l>

<C-e> to cancel popup menu and reject selection

1. Whole lines						|i_CTRL-X_CTRL-L|
2. keywords in the current file				|i_CTRL-X_CTRL-N|
3. keywords in 'dictionary'				|i_CTRL-X_CTRL-K|
4. keywords in 'thesaurus', thesaurus-style		|i_CTRL-X_CTRL-T|
5. keywords in the current and included files		|i_CTRL-X_CTRL-I|
6. tags							|i_CTRL-X_CTRL-]|
7. file names						|i_CTRL-X_CTRL-F|
8. definitions or macros				|i_CTRL-X_CTRL-D|
9. Vim command-line					|i_CTRL-X_CTRL-V|
10. User defined completion				|i_CTRL-X_CTRL-U|
(using completefunc)
11. omni completion					|i_CTRL-X_CTRL-O|
(filetype specific, use omnifunc)
12. Spelling suggestions				|i_CTRL-X_s|
13. keywords in 'complete'				|i_CTRL-N| |i_CTRL-P|

----------------------------------------

vim:tw=78:ts=8:ft=help:norl:set modifiable noreadonly:
