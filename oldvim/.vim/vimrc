" 'mapleader' should be in the beginning
let g:mapleader = "\<Space>"
let g:maplocalleader = "\<Space>"  "  meant for certain file types
map <BS> <Leader>

" To make undercurl work in iterm2 (:h E436, :h t_Cs)
let &t_Cs = "\e[4:3m"
let &t_Ce = "\e[4:0m"

" Cursor shape changes to show which mode you are in (:h t_SI)
" 6=beam, 4=underline, 2=block
let &t_SI = "\e[6 q" " SI = INSERT mode
let &t_SR = "\e[4 q" " SR = REPLACE mode
let &t_EI = "\e[2 q" " EI = NORMAL mode (ALL ELSE)
" Reset the cursor on start. After suspend-resume, cursor changes to beam even
" in normal mode. This will prevent that.
autocmd VimEnter,VimResume * silent execute '!echo -ne "\e[2 q"' | redraw!

" Format usin 'gq'. :h fo-table
set formatoptions=qjln

" Defaults
source $VIMRUNTIME/defaults.vim
" disable message from 'defaults.vim' when entering cmdwin
autocmd! vimHints

syntax on

" 'listchars' is not local to buffer, only local to window
autocmd FileType * if &ft =~ '\v(help|markdown)' | setlocal listchars=tab:\ \ ,trail:\  | else | setlocal listchars=tab:→.,trail:~ | endif
autocmd BufEnter * if &ft == '' | setlocal listchars=tab:\ \ ,trail:\  | endif
set list

set fillchars=stlnc:┴
if &background == 'dark'
    set fillchars=vert:│,fold:۰,diff:·,stl:─,stlnc:═
endif
set noshowcmd  " Stop echoing keymapped typed keys in the bottom row
set clipboard=unnamed  " Always use the system clipboard
set mouse=  " XXX: Disable mouse (set by defaults.vim). Needed by macos terminal app.
set number  " line numbering
" set relativenumber
set hls  " highlight search
set lbr  " line break
set hidden  " buffer becomes hidden (not unloaded) when it is abandoned (ex. help buffer)
set nojoinspaces  " suppress inserting two spaces between sentences
set shortmess+=I  " disable startup message
set report=0  " show yank confirmation even if 1 or 2 lines yanked
set showmatch  " show matching braces when text indicator is over them
set ignorecase  " case-insensitive search
set smartcase  " smart search
set splitbelow  " open new split panes to right
set splitright  " open new split panes to bottom
set breakindent  " wrapped line will continue visually indented
set smarttab
set spellsuggest=best,10  " set maximum number of suggestions listed top 10 items:
set foldmethod=indent
" set foldnestmax=1
set nofoldenable  " do not do folding when you open file
set signcolumn=yes  " always show column (used by git signs)
" set dictionary+=/usr/share/dict/words
set whichwrap+=<,>,h,l  " make arrows and h, l, push cursor to next line
set virtualedit=block  " allows selection of rectangular text in visual block mode
set grepprg=grep\ -REIins\ --exclude=tags\ --exclude=\"*.swp\"\ --exclude-dir=.git\ $*
" XXX: Do not set 'infercase' -- when typing all-caps it spams.
set autocomplete complete-=t,i shortmess+=cC
" set cpp=border:off
" set cot=popup
set cpt=.^5,w^5,b^5,u^5
" set cpt=.^5,w^5,b^5,u^5,k/Users/gp/git/ngram-complete.vim/data/en_1w.txt^5
" set cpt+=k/Users/gp/git/ngram-complete.vim/data/en_1w.txt
" argadd ~/sqlite-amalgamation-3500200/sqlite3.c *

augroup CustomAutocmds | autocmd!
    " Dismiss the info preview window (^C to keep, so you can interact)
    autocmd CompleteDone * if getcmdwintype() == '' | pclose | endif

    " Macro key mapped to Q for help file
    autocmd FileType help nnoremap <buffer> Q q

    " Windows to close
    autocmd FileType help,vim-plug,qf nnoremap <buffer><silent> q :close<CR>

    " netrw: 'q' is already mapped to compound key (ex. 'qf' gets file info).
    autocmd FileType netrw nnoremap <buffer><silent> qq :close<CR>

    " Tell vim to automatically open the quickfix and location window.
    " :grep, :vimgrep and so on are called quickfix commands, they trigger
    " QuickFixCmdPost.
    " NOTE: Exclude cadexppr also ([^c]*), otherwise g//caddexpr will open
    " quickfix after the first match.
    autocmd QuickFixCmdPost [^lc]* cwindow
    autocmd QuickFixCmdPost l*    lwindow

    " Update tags in help file
    autocmd BufWritePost **/doc/*.txt helptags <afile>:p:h

    " Make help files writeable
    autocmd BufEnter **/doc/*.txt set modifiable noreadonly

    " spell : When a word is CamelCased, assume "Cased" is a separate word
    autocmd FileType help,markdown set spelloptions=camel

    " Remove trailing whitespaces (not good for vim help files)
    " autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

    " Set dictionary from ~/.vim/dicts
    autocmd FileType *
          \ let s:dictfile = expand('~/.vim') . '/dicts/' . &filetype |
          \ if filereadable(s:dictfile) |
          \   let &l:dictionary = s:dictfile |
          \   exe $'setl complete+=k{s:dictfile}^10' |
          \ endif
augroup END

if has('syntax') && has('eval') && !getcompletion('matchit', 'packadd')->empty()
    packadd! matchit
endif

if !getcompletion('comment', 'packadd')->empty()
    packadd! comment
endif

if !getcompletion('hlyank', 'packadd')->empty()
    packadd! hlyank
endif

" Debug Vim in Linux (:h :Termdebug), needs gdb
" packadd! termdebug
" set mouse=a # Needed for Winbar menu
" g:termdebug_config = {}
" g:termdebug_config['wide'] = 1 # Force vertical split
" g:termdebug_config['evaluate_in_popup'] = v:true

" Download plug.vim if it doesn't exist yet
" if empty(glob('~/.vim/autoload/plug.vim'))
"     silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
"                 \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" endif
" " Run PlugInstall if there are missing plugins
" autocmd VimEnter * if exists('g:plugs') && len(filter(values(g:plugs), '!isdirectory(v:val.dir)')) > 0
"             \| PlugInstall --sync | source $MYVIMRC
"             \| endif

" if has('gui')  " MacVim
"     call plug#begin("~/.local/share/vim-plug/")
"     " Plug '~/git/devdocs.vim'
"     call plug#end()
" else
"     call plug#begin("~/.local/share/vim-plug/")
"     " Make sure you use single quotes
"     " Plug 'lacygoill/vim9asm'
"     " Plug 'yegappan/lsp'
"     " Plug 'girishji/pythondoc.vim', {'for': 'python'}
"     " Plug 'girishji/devdocs.vim'
"     "
"     " XXX: LSP has a problem where open dict.c and :4000 and you
"     " get 'Press ENTER or type command to continue' message. Also, happens
"     " when a second file is opened.
"     Plug 'girishji/lsp'
"     call plug#end()
" endif

" vim: shiftwidth=2 sts=2 expandtab
