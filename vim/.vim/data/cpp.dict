-- Cpp dictionary
--
-- Constrained algorithms , accept either an iterator-sentinel pair or a single range argument
--
-- Search operations
ranges::all_of checks if a predicate is true for all of the elements in a range
ranges::any_of checks if a predicate is true for any of the elements in a range
ranges::none_of checks if a predicate is true for none of the elements in a range
ranges::for_each applies a function to a range of elements
ranges::for_each_n applies a function object to the first N elements of a sequence
ranges::count returns the number of elements satisfying specific criteria
ranges::count_if
ranges::mismatch finds the first position where two ranges differ
ranges::equal determines if two sets of elements are the same
ranges::lexicographical_compare returns true if one range is lexicographically less than another
ranges::find finds the first element satisfying specific criteria
ranges::find_if
ranges::find_if_not
ranges::find_last finds the last element satisfying specific criteria
ranges::find_last_if
ranges::find_last_if_not
ranges::find_end finds the last sequence of elements in a certain range
ranges::find_first_of searches for any one of a set of elements
ranges::adjacent_find finds the first two adjacent items that are equal (or satisfy a given predicate)
ranges::search searches for the first occurrence of a range of elements
ranges::search_n searches for the first occurrence of a number consecutive copies of an element in a range
ranges::contains checks if the range contains the given element
ranges::contains_subrange checks if the range contains the given subrange
ranges::starts_with checks whether a range starts with another range
ranges::ends_with checks whether a range ends with another range
ranges::copy copies a range of elements to a new location
ranges::copy_if
ranges::copy_n copies a number of elements to a new location
ranges::copy_backward copies a range of elements in backwards order
ranges::move moves a range of elements to a new location
ranges::move_backward moves a range of elements to a new location in backwards order
ranges::fill assigns a range of elements a certain value
ranges::fill_n assigns a value to a number of elements
ranges::transform applies a function to a range of elements
ranges::generate saves the result of a function in a range
ranges::generate_n saves the result of N applications of a function
ranges::remove removes elements satisfying specific criteria
ranges::remove_if
ranges::remove_copy copies a range of elements omitting those that satisfy specific criteria
ranges::remove_copy_if
ranges::replace replaces all values satisfying specific criteria with another value
ranges::replace_if
ranges::replace_copy copies a range, replacing elements satisfying specific criteria with another value
ranges::replace_copy_if
ranges::swap_ranges swaps two ranges of elements
ranges::reverse reverses the order of elements in a range
ranges::reverse_copy creates a copy of a range that is reversed
ranges::rotate rotates the order of elements in a range
ranges::rotate_copy copies and rotate a range of elements
ranges::shuffle randomly re-orders elements in a range
ranges::shift_left shifts elements in a range
ranges::shift_right
ranges::sample selects N random elements from a sequence
ranges::unique removes consecutive duplicate elements in a range
ranges::unique_copy creates a copy of some range of elements that contains no consecutive duplicates
ranges::is_partitioned determines if the range is partitioned by the given predicate
ranges::partition divides a range of elements into two groups
ranges::partition_copy copies a range dividing the elements into two groups
ranges::stable_partition divides elements into two groups while preserving their relative order
ranges::partition_point locates the partition point of a partitioned range
ranges::is_sorted checks whether a range is sorted into ascending order
ranges::is_sorted_until finds the largest sorted subrange
ranges::sort sorts a range into ascending order
ranges::partial_sort sorts the first N elements of a range
ranges::partial_sort_copy copies and partially sorts a range of elements
ranges::stable_sort sorts a range of elements while preserving order between equal elements
ranges::nth_element partially sorts the given range making sure that it is partitioned by the given element
ranges::lower_bound returns an iterator to the first element not less than the given value
ranges::upper_bound returns an iterator to the first element greater than a certain value
ranges::binary_search determines if an element exists in a partially-ordered range
ranges::equal_range returns range of elements matching a specific key
ranges::merge merges two sorted ranges
ranges::inplace_merge merges two ordered ranges in-place
ranges::includes returns true if one sequence is a subsequence of another
ranges::set_difference computes the difference between two sets
ranges::set_intersection computes the intersection of two sets
ranges::set_symmetric_difference computes the symmetric difference between two sets
ranges::set_union computes the union of two sets
ranges::is_heap checks if the given range is a max heap
ranges::is_heap_until finds the largest subrange that is a max heap
ranges::make_heap creates a max heap out of a range of elements
ranges::push_heap adds an element to a max heap
ranges::pop_heap removes the largest element from a max heap
ranges::sort_heap turns a max heap into a range of elements sorted in ascending order
ranges::max returns the greater of the given values
ranges::max_element returns the largest element in a range
ranges::min returns the smaller of the given values
ranges::min_element returns the smallest element in a range
ranges::minmax returns the smaller and larger of two elements
ranges::minmax_element returns the smallest and the largest elements in a range
ranges::clamp clamps a value between a pair of boundary values
ranges::is_permutation determines if a sequence is a permutation of another sequence
ranges::next_permutation generates the next greater lexicographic permutation of a range of elements
ranges::prev_permutation generates the next smaller lexicographic permutation of a range of elements
ranges::iota fills a range with successive increments of the starting value
ranges::fold_left left-folds a range of elements
ranges::fold_left_first left-folds a range of elements using the first element as an initial value
ranges::fold_right right-folds a range of elements
ranges::fold_right_last right-folds a range of elements using the last element as an initial value
ranges::fold_left_with_iter left-folds a range of elements, and returns a pair (iterator, value)
ranges::fold_left_first_with_iter left-folds a range of elements using the first element as an initial value, and returns a pair (iterator, optional)
ranges::uninitialized_copy copies a range of objects to an uninitialized area of memory
ranges::uninitialized_copy_n copies a number of objects to an uninitialized area of memory
ranges::uninitialized_fill copies an object to an uninitialized area of memory, defined by a range
ranges::uninitialized_fill_n copies an object to an uninitialized area of memory, defined by a start and a count
ranges::uninitialized_move moves a range of objects to an uninitialized area of memory
ranges::uninitialized_move_n moves a number of objects to an uninitialized area of memory
ranges::uninitialized_default_construct constructs objects by default-initialization in an uninitialized area of memory, defined by a range
ranges::uninitialized_default_construct_n constructs objects by default-initialization in an uninitialized area of memory, defined by a start and count
ranges::uninitialized_value_construct constructs objects by value-initialization in an uninitialized area of memory, defined by a range
ranges::uninitialized_value_construct_n constructs objects by value-initialization in an uninitialized area of memory, defined by a start and a count
ranges::destroy destroys a range of objects
ranges::destroy_n destroys a number of objects in a range
ranges::destroy_at destroys an object at a given address
ranges::construct_at creates an object at a given address
ranges::generate_random fills a range with random numbers from a uniform random bit generator
ranges::in_fun_result provides a way to store an iterator and a function object as a single unit
ranges::in_in_result provides a way to store two iterators as a single unit
ranges::in_out_result provides a way to store two iterators as a single unit
ranges::in_in_out_result provides a way to store three iterators as a single unit
ranges::in_out_out_result provides a way to store three iterators as a single unit
ranges::min_max_result provides a way to store two objects or references of the same type as a single unit
ranges::in_found_result provides a way to store an iterator and a boolean flag as a single unit
ranges::in_value_result provides a way to store an iterator and a value as a single unit
ranges::out_value_result provides a way to store an iterator and a value as a single unit
