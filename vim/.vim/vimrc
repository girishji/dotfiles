" 'mapleader' should be in the beginning
let g:mapleader = "\<Space>"
let g:maplocalleader = "\<Space>"  "  meant for certain file types
map <BS> <Leader>

" To make undercurl work in iterm2 (:h E436, :h t_Cs)
let &t_Cs = "\e[4:3m"
let &t_Ce = "\e[4:0m"

" Disable bracketed paste (otherwise pasting does not work in popup)
" https://github.com/vim/vim/issues/11766
" &t_BE = ""
" &t_BD = "\e[?2004l"
" exec "set t_PS=\e[200~"
" exec "set t_PE=\e[201~"

" Cursor shape changes to show which mode you are in (:h t_SI)
" 6=beam, 4=underline, 2=block
let &t_SI = "\e[6 q" " SI = INSERT mode
let &t_SR = "\e[4 q" " SR = REPLACE mode
let &t_EI = "\e[2 q" " EI = NORMAL mode (ALL ELSE)
" Reset the cursor on start. After suspend-resume, cursor changes to beam even
" in normal mode. This will prevent that.
autocmd VimEnter,VimResume * silent execute '!echo -ne "\e[2 q"' | redraw!

" Format usin 'gq'. :h fo-table
set formatoptions=qjln

" Defaults
source $VIMRUNTIME/defaults.vim
" disable message from 'defaults.vim' when entering cmdwin
autocmd! vimHints

" NOTE: $VIMRUNTIME/ftplugin/python.vim sets tabstop, shiftwidth, etc.

" Turn on listchars for Noname/scratch files and non-help files
" 'listchars' is not local to buffer, only local to window
autocmd FileType * if &ft =~ '\v(help|markdown)' | setlocal listchars=tab:\ \ ,trail:\  | else | setlocal listchars=tab:→·,trail:~ | endif
autocmd BufEnter * if &ft == '' | setlocal listchars=tab:\ \ ,trail:\  | endif
set list

" set fillchars=vert:│,fold:۰,diff:·
set fillchars=stlnc:┴
if &background == 'dark'
    set fillchars=vert:│,fold:۰,diff:·,stl:─,stlnc:═
endif
set clipboard=unnamed  " Always use the system clipboard
set mouse=  " XXX: Disable mouse (set by defaults.vim). Needed by macos terminal app.
set number  " line numbering
" set relativenumber
set hls  " highlight search
set lbr  " line break
set hidden  " buffer becomes hidden (not unloaded) when it is abandoned (ex. help buffer)
set nojoinspaces  " suppress inserting two spaces between sentences
set shortmess+=I  " disable startup message
set report=0  " show yank confirmation even if 1 or 2 lines yanked
set showmatch  " show matching braces when text indicator is over them
set ignorecase  " case-insensitive search
set smartcase  " smart search
set infercase  " when doing <c-n/p> completion, respect case
set splitbelow  " open new split panes to right
set splitright  " open new split panes to bottom
set breakindent  " wrapped line will continue visually indented
set smarttab
set spellsuggest=best,10  " set maximum number of suggestions listed top 10 items:
set foldmethod=indent
" set foldnestmax=1
set nofoldenable  " do not do folding when you open file
set signcolumn=yes  " always show column for lsp diagnostics etc
set dictionary+=/usr/share/dict/words
set whichwrap+=<,>,h,l  " make arrows and h, l, push cursor to next line
" set pumheight=7  " max number of items in popup menu (pmenu)
set virtualedit=block  " allows selection of rectangular text in visual block mode
" set rulerformat=%80(%=%f\ %h%m%r\ %-6y\ %-5.(%l,%c%V%)\ %P%)

syntax on

" Plugins

if has('syntax') && has('eval') && !getcompletion('matchit', 'packadd')->empty()
    packadd! matchit
endif
if !getcompletion('comment', 'packadd')->empty()
    packadd! comment
endif
if !getcompletion('hlyank', 'packadd')->empty()
    packadd! hlyank
endif

" Debug Vim in Linux (:h :Termdebug), needs gdb
" packadd! termdebug
" set mouse=a # Needed for Winbar menu
" g:termdebug_config = {}
" g:termdebug_config['wide'] = 1 # Force vertical split
" g:termdebug_config['evaluate_in_popup'] = v:true

" " Download plug.vim if it doesn't exist yet
" if empty(glob('~/.vim/autoload/plug.vim'))
"     silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
"                 \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" endif
" " Run PlugInstall if there are missing plugins
" autocmd VimEnter * if exists('g:plugs') && len(filter(values(g:plugs), '!isdirectory(v:val.dir)')) > 0
"             \| PlugInstall --sync | source $MYVIMRC
"             \| endif

" if has('gui')  " MacVim
"     call plug#begin("~/.local/share/vim-plug/")
"     " Plug '~/git/devdocs.vim'
"     call plug#end()
" else
"     call plug#begin("~/.local/share/vim-plug/")
"     " Make sure you use single quotes
"     " Plug 'lacygoill/vim9asm'
"     " Plug 'yegappan/lsp'
"     " Plug 'girishji/pythondoc.vim', {'for': 'python'}
"     " Plug 'girishji/devdocs.vim'
"     call plug#end()
" endif

augroup CustomAucmds | autocmd!
    " Macro key mapped to Q for help file
    autocmd FileType help nnoremap <buffer> Q q
    " Windows to close
    autocmd FileType help,vim-plug,qf nnoremap <buffer><silent> q :close<CR>
    " netrw: 'q' is already mapped to compound key (ex. 'qf' gets file info).
    autocmd FileType netrw nnoremap <buffer><silent> qq :close<CR>
    " Tell vim to automatically open the quickfix and location window.
    " :grep, :vimgrep and so on are called quickfix commands, they trigger
    " QuickFixCmdPost.
    " NOTE: Exclude cadexppr also ([^c]*), otherwise g//caddexpr will open
    " quickfix after the first match.
    autocmd QuickFixCmdPost [^lc]* cwindow
    autocmd QuickFixCmdPost l*    lwindow
    " Update tags in help file
    autocmd BufWritePost **/doc/*.txt helptags <afile>:p:h
    " Make help files writeable
    autocmd BufEnter **/doc/*.txt set modifiable noreadonly
    " spell : When a word is CamelCased, assume "Cased" is a separate word
    autocmd FileType help,markdown set spelloptions=camel
    " Remove trailing whitespaces
    autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
    " Set dictionary from ~/.vim/dicts
    autocmd FileType *
          \ let s:dictfile = expand('~/.vim') . '/dicts/' . &filetype |
          \ if filereadable(s:dictfile) |
          \   let &l:dictionary = s:dictfile |
          \   exe $'setl complete+=k{s:dictfile}' |
          \ endif
augroup END

" vim: shiftwidth=2 sts=2 expandtab
